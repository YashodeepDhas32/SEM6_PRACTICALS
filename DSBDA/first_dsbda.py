# -*- coding: utf-8 -*-
"""First_DSBDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17IjcMWJPXhhszSSOXmiHZRoEweTZR9NP
"""

# load the required libraries
import pandas as pd

# give path to your dataset(csv) file
df = pd.read_csv(r'/iris.csv')

print(df)

df.isnull()

df.isnull().any()

# count Column wise missing value using isnull()
df.isnull().sum()

# count row wise missing value using isnull()
df.isnull().sum(axis=1)

# count Not a Number Values
df.isna().sum()

# count of missing values of a specific column
df.variety.isnull().sum()

# groupby count of missing values of a column
df.groupby(['sepal.length'])['sepal.width'].apply(lambda x: x.isnull().sum())

# To check the datatype of each column
df.dtypes

# To change the datatype (data type of petal.lengthchanged to int)
df['petal.length'] = df['petal.length'].astype("int")
df.dtypes

# data normalization
from sklearn import preprocessing, datasets

iris = datasets.load_iris()

# load iris dataset into DataFrame Object df
df = pd.DataFrame(iris.data, columns=iris.feature_names)

# print first 5 values of dataframe
df.head()

x = df[['sepal length (cm)']].values.astype(float)

# Create a minimum and maximum processor object
min_max_scaler = preprocessing.MinMaxScaler()

# Create an object to transform the data to fit minmax processor (creates numpy ndarray)
x_scaled = min_max_scaler.fit_transform(x)

# Run the normalizer on the dataframe
df_normalized = pd.DataFrame(x_scaled)

print(df_normalized)

# iris dataset used for label encoding
df = pd.read_csv(r'/iris.csv')

from sklearn import preprocessing

# Observe the unique values for the variety column(of flowers).
df['variety'].unique()

# define label_encoder object knows how to understand word labels
label_encoder = preprocessing.LabelEncoder()

# Encode labels in column 'variety'.
df['variety']= label_encoder.fit_transform(df['variety'])

# Observe the "label encoded" unique values for the variety column(of flowers).
df['variety'].unique()

